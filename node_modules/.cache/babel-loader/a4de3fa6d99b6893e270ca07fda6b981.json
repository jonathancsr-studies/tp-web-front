{"ast":null,"code":"'use strict';\n/**\r\n * Module dependencies.\r\n * @private\r\n */\n\nvar fs = require('fs');\n/**\r\n * Module exports.\r\n * @public\r\n */\n\n\nmodule.exports = base64ToImage;\n/**\r\n * Change base64Str to image and write image file with \r\n   the specified file name to the specified file path.\r\n * @param {String} base64 string (mandatory)\r\n * @param {String} file path e.g. /opt/temp/uploads/ (mandatory)\r\n * @return {Object} optionsObj holds image type, image filename, debug e.g.{'fileName':fileName, 'type':type,'debug':true} (optional)\r\n * @public\r\n */\n\nfunction base64ToImage(base64Str, path, optionalObj) {\n  if (!base64Str || !path) {\n    throw new Error('Missing mandatory arguments base64 string and/or path string');\n  }\n\n  var optionalObj = optionalObj || {};\n  var imageBuffer = decodeBase64Image(base64Str);\n  var imageType = optionalObj.type || imageBuffer.type || 'png';\n  var fileName = optionalObj.fileName || 'img-' + Date.now();\n  var abs;\n  var fileName = '' + fileName;\n\n  if (fileName.indexOf('.') === -1) {\n    imageType = imageType.replace('image/', '');\n    fileName = fileName + '.' + imageType;\n  }\n\n  abs = path + fileName;\n  fs.writeFile(abs, imageBuffer.data, 'base64', function (err) {\n    if (err && optionalObj.debug) {\n      console.log(\"File image write error\", err);\n    }\n  });\n  return {\n    'imageType': imageType,\n    'fileName': fileName\n  };\n}\n\n;\n/**\r\n * Decode base64 string to buffer.\r\n *\r\n * @param {String} base64Str string\r\n * @return {Object} Image object with image type and data buffer.\r\n * @public\r\n */\n\nfunction decodeBase64Image(base64Str) {\n  var matches = base64Str.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/);\n  var image = {};\n\n  if (!matches || matches.length !== 3) {\n    throw new Error('Invalid base64 string');\n  }\n\n  image.type = matches[1];\n  image.data = new Buffer(matches[2], 'base64');\n  return image;\n}","map":null,"metadata":{},"sourceType":"script"}