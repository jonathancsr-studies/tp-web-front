{"ast":null,"code":"/*! https://mths.be/scrollingelement v1.5.2 by @diegoperini & @mathias | MIT license */\nif (!('scrollingElement' in document)) (function () {\n  function computeStyle(element) {\n    if (window.getComputedStyle) {\n      // Support Firefox < 4 which throws on a single parameter.\n      return getComputedStyle(element, null);\n    } // Support Internet Explorer < 9.\n\n\n    return element.currentStyle;\n  }\n\n  function isBodyElement(element) {\n    // The `instanceof` check gives the correct result for e.g. `body` in a\n    // non-HTML namespace.\n    if (window.HTMLBodyElement) {\n      return element instanceof HTMLBodyElement;\n    } // Fall back to a `tagName` check for old browsers.\n\n\n    return /body/i.test(element.tagName);\n  }\n\n  function getNextBodyElement(frameset) {\n    // We use this function to be correct per spec in case `document.body` is\n    // a `frameset` but there exists a later `body`. Since `document.body` is\n    // a `frameset`, we know the root is an `html`, and there was no `body`\n    // before the `frameset`, so we just need to look at siblings after the\n    // `frameset`.\n    var current = frameset;\n\n    while (current = current.nextSibling) {\n      if (current.nodeType == 1 && isBodyElement(current)) {\n        return current;\n      }\n    } // No `body` found.\n\n\n    return null;\n  } // Note: standards mode / quirks mode can be toggled at runtime via\n  // `document.write`.\n\n\n  var isCompliantCached;\n\n  var isCompliant = function isCompliant() {\n    var isStandardsMode = /^CSS1/.test(document.compatMode);\n\n    if (!isStandardsMode) {\n      // In quirks mode, the result is equivalent to the non-compliant\n      // standards mode behavior.\n      return false;\n    }\n\n    if (isCompliantCached === void 0) {\n      // When called for the first time, check whether the browser is\n      // standard-compliant, and cache the result.\n      var iframe = document.createElement('iframe');\n      iframe.style.height = '1px';\n      (document.body || document.documentElement || document).appendChild(iframe);\n      var doc = iframe.contentWindow.document;\n      doc.write('<!DOCTYPE html><div style=\"height:9999em\">x</div>');\n      doc.close();\n      isCompliantCached = doc.documentElement.scrollHeight > doc.body.scrollHeight;\n      iframe.parentNode.removeChild(iframe);\n    }\n\n    return isCompliantCached;\n  };\n\n  function isRendered(style) {\n    return style.display != 'none' && !(style.visibility == 'collapse' && /^table-(.+-group|row|column)$/.test(style.display));\n  }\n\n  function isScrollable(body) {\n    // A `body` element is scrollable if `body` and `html` both have\n    // non-`visible` overflow and are both being rendered.\n    var bodyStyle = computeStyle(body);\n    var htmlStyle = computeStyle(document.documentElement);\n    return bodyStyle.overflow != 'visible' && htmlStyle.overflow != 'visible' && isRendered(bodyStyle) && isRendered(htmlStyle);\n  }\n\n  var scrollingElement = function scrollingElement() {\n    if (isCompliant()) {\n      return document.documentElement;\n    }\n\n    var body = document.body; // Note: `document.body` could be a `frameset` element, or `null`.\n    // `tagName` is uppercase in HTML, but lowercase in XML.\n\n    var isFrameset = body && !/body/i.test(body.tagName);\n    body = isFrameset ? getNextBodyElement(body) : body; // If `body` is itself scrollable, it is not the `scrollingElement`.\n\n    return body && isScrollable(body) ? null : body;\n  };\n\n  if (Object.defineProperty) {\n    // Support modern browsers that lack a native implementation.\n    Object.defineProperty(document, 'scrollingElement', {\n      'get': scrollingElement\n    });\n  } else if (document.__defineGetter__) {\n    // Support Firefox ≤ 3.6.9, Safari ≤ 4.1.3.\n    document.__defineGetter__('scrollingElement', scrollingElement);\n  } else {\n    // IE ≤ 4 lacks `attachEvent`, so it only gets this one assignment. IE ≤ 7\n    // gets it too, but the value is updated later (see `propertychange`).\n    document.scrollingElement = scrollingElement();\n    document.attachEvent && document.attachEvent('onpropertychange', function () {\n      // This is for IE ≤ 7 only.\n      // A `propertychange` event fires when `<body>` is parsed because\n      // `document.activeElement` then changes.\n      if (window.event.propertyName == 'activeElement') {\n        document.scrollingElement = scrollingElement();\n      }\n    });\n  }\n})();","map":null,"metadata":{},"sourceType":"script"}